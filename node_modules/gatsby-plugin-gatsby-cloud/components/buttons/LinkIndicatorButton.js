"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = LinkIndicatorButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _trackEvent = _interopRequireDefault(require("../../utils/trackEvent"));

var _IndicatorButton = _interopRequireDefault(require("./IndicatorButton"));

var _icons = require("../icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const copySuccessTooltip = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _icons.successIcon, `Link copied`);

const getButtonProps = ({
  buildStatus
}) => {
  switch (buildStatus) {
    case `BUILDING`:
    case `UPTODATE`:
      return {
        tooltipContent: `Copy link`,
        active: true
      };

    case `SUCCESS`:
    case `ERROR`:
    default:
      {
        return {};
      }
  }
};

function LinkIndicatorButton(props) {
  const {
    orgId,
    siteId,
    buildId
  } = props;
  const [linkButtonCopyProps, setLinkButtonCopyProps] = (0, _react.useState)();
  const buttonProps = getButtonProps(props);

  const copyLinkClick = () => {
    (0, _trackEvent.default)({
      eventType: `PREVIEW_INDICATOR_CLICK`,
      orgId,
      siteId,
      buildId,
      name: `copy link`
    });
    setLinkButtonCopyProps({
      tooltipContent: copySuccessTooltip,
      overrideShowTooltip: true
    });
    setTimeout(() => {
      setLinkButtonCopyProps({
        tooltipContent: copySuccessTooltip,
        overrideShowTooltip: false
      }); // We want the tooltip to linger for two seconds to let the user know it has been copied
    }, 2000);
    setTimeout(() => {
      setLinkButtonCopyProps({
        tooltipContent: `Copy Link`
      }); // The tooltips fade out, in order to make sure that the text does not change
      // while it is fading out we need to wait a bit longer than the time used above.
    }, 2400);

    if (window) {
      navigator.clipboard.writeText(window.location.href);
    }
  };

  const trackHover = () => {
    (0, _trackEvent.default)({
      eventType: `PREVIEW_INDICATOR_HOVER`,
      orgId,
      siteId,
      buildId,
      name: `link hover`
    });
  };

  return /*#__PURE__*/_react.default.createElement(_IndicatorButton.default, (0, _extends2.default)({
    testId: `link`,
    iconSvg: _icons.linkIcon,
    onClick: copyLinkClick,
    onMouseEnter: (buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.active) && trackHover,
    buttonIndex: props.buttonIndex,
    hoverable: true
  }, buttonProps, linkButtonCopyProps));
}