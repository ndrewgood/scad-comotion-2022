"use strict";

exports.__esModule = true;
exports.default = IndicatorButton;

var _react = _interopRequireWildcard(require("react"));

var _tooltips = require("../tooltips");

var _icons = require("../icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function IndicatorButton({
  buttonIndex,
  tooltipContent,
  overrideShowTooltip = false,
  iconSvg,
  onClick,
  showSpinner,
  active = false,
  testId,
  onMouseEnter,
  hoverable
}) {
  const [showTooltip, setShowTooltip] = (0, _react.useState)(false);
  const buttonRef = (0, _react.useRef)(null);
  const isFirstButton = buttonIndex === 0;
  const marginTop = isFirstButton ? `0px` : `8px`;

  const onMouseLeave = () => setShowTooltip(false);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("button", {
    ref: buttonRef,
    "data-gatsby-preview-indicator": "button",
    "data-gatsby-preview-indicator-active-button": `${active}`,
    "data-gatsby-preview-indicator-hoverable": active && hoverable ? `true` : `false`,
    style: {
      marginTop: marginTop
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": `${testId}-button`,
    onMouseEnter: () => {
      setShowTooltip(true);

      if (onMouseEnter) {
        onMouseEnter();
      }
    },
    onMouseLeave: onMouseLeave,
    onClick: active ? onClick : null
  }, iconSvg, showSpinner && /*#__PURE__*/_react.default.createElement("div", {
    "data-gatsby-preview-indicator": "spinner"
  }, _icons.spinnerIcon))), tooltipContent && /*#__PURE__*/_react.default.createElement(_tooltips.IndicatorButtonTooltip, {
    tooltipContent: tooltipContent,
    overrideShowTooltip: overrideShowTooltip,
    showTooltip: showTooltip,
    elementRef: buttonRef,
    testId: testId
  }));
}