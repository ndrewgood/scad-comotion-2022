"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = InfoIndicatorButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _dateFns = require("date-fns");

var _trackEvent = _interopRequireDefault(require("../../utils/trackEvent"));

var _IndicatorButton = _interopRequireDefault(require("./IndicatorButton"));

var _icons = require("../icons");

const getButtonProps = props => {
  const {
    createdAt,
    buildStatus
  } = props;

  switch (buildStatus) {
    case `UPTODATE`:
      {
        return {
          tooltipContent: `Preview updated ${(0, _dateFns.formatDistance)(Date.now(), new Date(createdAt), {
            includeSeconds: true
          })} ago`,
          active: true
        };
      }

    case `SUCCESS`:
    case `ERROR`:
    case `BUILDING`:
    default:
      {
        return {};
      }
  }
};

function InfoIndicatorButton(props) {
  const {
    orgId,
    siteId,
    buildId
  } = props;
  const buttonProps = getButtonProps(props);

  const trackHover = () => {
    (0, _trackEvent.default)({
      eventType: `PREVIEW_INDICATOR_HOVER`,
      orgId,
      siteId,
      buildId,
      name: `info hover`
    });
  };

  return /*#__PURE__*/_react.default.createElement(_IndicatorButton.default, (0, _extends2.default)({
    testId: "info",
    iconSvg: _icons.infoIcon,
    onMouseEnter: (buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.active) && trackHover,
    buttonIndex: props.buttonIndex,
    hoverable: true
  }, buttonProps));
}