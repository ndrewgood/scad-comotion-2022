"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = GatsbyIndicatorButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _IndicatorButton = _interopRequireDefault(require("./IndicatorButton"));

var _tooltips = require("../tooltips");

var _icons = require("../icons");

const getButtonProps = ({
  buildStatus,
  orgId,
  siteId,
  buildId,
  isOnPrettyUrl,
  sitePrefix,
  erroredBuildId
}) => {
  switch (buildStatus) {
    case `SUCCESS`:
      {
        return {
          tooltipContent: /*#__PURE__*/_react.default.createElement(_tooltips.BuildSuccessTooltipContent, {
            isOnPrettyUrl: isOnPrettyUrl,
            sitePrefix: sitePrefix,
            buildId: buildId,
            siteId: siteId,
            orgId: orgId
          }),
          overrideShowTooltip: true,
          active: true
        };
      }

    case `ERROR`:
      {
        return {
          tooltipContent: /*#__PURE__*/_react.default.createElement(_tooltips.BuildErrorTooltipContent, {
            siteId: siteId,
            orgId: orgId,
            buildId: erroredBuildId
          }),
          overrideShowTooltip: true,
          active: true
        };
      }

    case `BUILDING`:
      {
        return {
          tooltipContent: `Building a new preview`,
          showSpinner: true,
          overrideShowTooltip: true
        };
      }

    case `UPTODATE`:
      {
        return {
          active: true
        };
      }

    default:
      {
        return {};
      }
  }
};

function GatsbyIndicatorButton(props) {
  return /*#__PURE__*/_react.default.createElement(_IndicatorButton.default, (0, _extends2.default)({
    testId: "gatsby",
    iconSvg: _icons.gatsbyIcon
  }, getButtonProps(props), {
    buttonIndex: props.buttonIndex
  }));
}