{"version":3,"sources":["../../../src/utils/page-ssr-module/entry.ts"],"names":["tracerReadyPromise","process","env","GATSBY_OPEN_TRACING_CONFIG_FILE","pageTemplateDetailsMap","INLINED_TEMPLATE_TO_DETAILS","getData","pathName","graphqlEngine","req","spanContext","telemetryResolverTimings","getDataWrapperActivity","reporter","phantomActivity","parentSpan","start","page","templateDetails","potentialPagePath","findMetaActivity","span","maybePage","findPageByPath","Error","componentChunkName","end","executionPromises","results","serverData","query","runningQueryActivity","push","runQuery","context","queryName","path","componentPath","forceGraphqlTracing","then","queryResults","errors","length","e","codeFrame","locations","line","column","queryRunningError","message","stack","finally","mode","runningGetServerDataActivity","mod","serverDataResults","Promise","all","props","pageContext","searchString","maybeQueryString","Object","entries","map","k","v","join","serverDataHeaders","headers","serverDataStatus","status","getPath","data","matchPath","renderPageData","activity","staticQueryHashes","JSON","stringify","parse","readStaticQueryContext","templatePath","filePath","__dirname","rawSQContext","fs","readFile","renderHTML","pageData","wrapperActivity","readStaticQueryContextActivity","staticQueryContext","renderHTMLActivity","pagePath","assets","inlinePageData","html"],"mappings":"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","sourcesContent":["// \"engines-fs-provider\" must be first import, as it sets up global\n// fs and this need to happen before anything else tries to import fs\nimport \"../engines-fs-provider\"\n\n// just types - those should not be bundled\nimport type { GraphQLEngine } from \"../../schema/graphql-engine/entry\"\nimport type { IExecutionResult } from \"../../query/types\"\nimport type { IGatsbyPage } from \"../../redux/types\"\nimport { IGraphQLTelemetryRecord } from \"../../schema/type-definitions\"\nimport type { IScriptsAndStyles } from \"../client-assets-for-template\"\nimport type { IPageDataWithQueryResult } from \"../page-data\"\nimport type { Request } from \"express\"\nimport type { Span, SpanContext } from \"opentracing\"\n\n// actual imports\nimport * as path from \"path\"\nimport * as fs from \"fs-extra\"\nimport {\n  constructPageDataString,\n  getPagePathFromPageDataPath,\n} from \"../page-data-helpers\"\n// @ts-ignore render-page import will become valid later on (it's marked as external)\nimport htmlComponentRenderer, { getPageChunk } from \"./routes/render-page\"\nimport { getServerData, IServerData } from \"../get-server-data\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { initTracer } from \"../tracer\"\nimport { getCodeFrame } from \"../../query/graphql-errors-codeframe\"\n\nexport interface ITemplateDetails {\n  query: string\n  staticQueryHashes: Array<string>\n  assets: IScriptsAndStyles\n}\nexport interface ISSRData {\n  results: IExecutionResult\n  page: IGatsbyPage\n  templateDetails: ITemplateDetails\n  potentialPagePath: string\n  serverDataHeaders?: Record<string, string>\n  serverDataStatus?: number\n  searchString: string\n}\n\nconst tracerReadyPromise = initTracer(\n  process.env.GATSBY_OPEN_TRACING_CONFIG_FILE ?? ``\n)\n\nconst pageTemplateDetailsMap: Record<\n  string,\n  ITemplateDetails\n  // @ts-ignore INLINED_TEMPLATE_TO_DETAILS is being \"inlined\" by bundler\n> = INLINED_TEMPLATE_TO_DETAILS\n\ntype MaybePhantomActivity =\n  | ReturnType<typeof reporter.phantomActivity>\n  | undefined\n\nexport async function getData({\n  pathName,\n  graphqlEngine,\n  req,\n  spanContext,\n  telemetryResolverTimings,\n}: {\n  graphqlEngine: GraphQLEngine\n  pathName: string\n  req?: Partial<Pick<Request, \"query\" | \"method\" | \"url\" | \"headers\">>\n  spanContext?: Span | SpanContext\n  telemetryResolverTimings?: Array<IGraphQLTelemetryRecord>\n}): Promise<ISSRData> {\n  await tracerReadyPromise\n\n  let getDataWrapperActivity: MaybePhantomActivity\n  try {\n    if (spanContext) {\n      getDataWrapperActivity = reporter.phantomActivity(`Running getData`, {\n        parentSpan: spanContext,\n      })\n      getDataWrapperActivity.start()\n    }\n\n    let page: IGatsbyPage\n    let templateDetails: ITemplateDetails\n    let potentialPagePath: string\n    let findMetaActivity: MaybePhantomActivity\n    try {\n      if (getDataWrapperActivity) {\n        findMetaActivity = reporter.phantomActivity(\n          `Finding details about page and template`,\n          {\n            parentSpan: getDataWrapperActivity.span,\n          }\n        )\n        findMetaActivity.start()\n      }\n      potentialPagePath = getPagePathFromPageDataPath(pathName) || pathName\n\n      // 1. Find a page for pathname\n      const maybePage = graphqlEngine.findPageByPath(potentialPagePath)\n\n      if (!maybePage) {\n        // page not found, nothing to run query for\n        throw new Error(`Page for \"${pathName}\" not found`)\n      }\n\n      page = maybePage\n\n      // 2. Lookup query used for a page (template)\n      templateDetails = pageTemplateDetailsMap[page.componentChunkName]\n      if (!templateDetails) {\n        throw new Error(\n          `Page template details for \"${page.componentChunkName}\" not found`\n        )\n      }\n    } finally {\n      if (findMetaActivity) {\n        findMetaActivity.end()\n      }\n    }\n\n    const executionPromises: Array<Promise<any>> = []\n\n    // 3. Execute query\n    // query-runner handles case when query is not there - so maybe we should consider using that somehow\n    let results: IExecutionResult = {}\n    let serverData: IServerData | undefined\n    if (templateDetails.query) {\n      let runningQueryActivity: MaybePhantomActivity\n      if (getDataWrapperActivity) {\n        runningQueryActivity = reporter.phantomActivity(`Running page query`, {\n          parentSpan: getDataWrapperActivity.span,\n        })\n        runningQueryActivity.start()\n      }\n      executionPromises.push(\n        graphqlEngine\n          .runQuery(\n            templateDetails.query,\n            {\n              ...page,\n              ...page.context,\n            },\n            {\n              queryName: page.path,\n              componentPath: page.componentPath,\n              parentSpan: runningQueryActivity?.span,\n              forceGraphqlTracing: !!runningQueryActivity,\n              telemetryResolverTimings,\n            }\n          )\n          .then(queryResults => {\n            if (queryResults.errors && queryResults.errors.length > 0) {\n              const e = queryResults.errors[0]\n              const codeFrame = getCodeFrame(\n                templateDetails.query,\n                e.locations && e.locations[0].line,\n                e.locations && e.locations[0].column\n              )\n\n              const queryRunningError = new Error(\n                e.message + `\\n\\n` + codeFrame\n              )\n              queryRunningError.stack = e.stack\n              throw queryRunningError\n            } else {\n              results = queryResults\n            }\n          })\n          .finally(() => {\n            if (runningQueryActivity) {\n              runningQueryActivity.end()\n            }\n          })\n      )\n    }\n\n    // 4. (if SSR) run getServerData\n    if (page.mode === `SSR`) {\n      let runningGetServerDataActivity: MaybePhantomActivity\n      if (getDataWrapperActivity) {\n        runningGetServerDataActivity = reporter.phantomActivity(\n          `Running getServerData`,\n          {\n            parentSpan: getDataWrapperActivity.span,\n          }\n        )\n        runningGetServerDataActivity.start()\n      }\n      executionPromises.push(\n        getPageChunk(page)\n          .then(mod => getServerData(req, page, potentialPagePath, mod))\n          .then(serverDataResults => {\n            serverData = serverDataResults\n          })\n          .finally(() => {\n            if (runningGetServerDataActivity) {\n              runningGetServerDataActivity.end()\n            }\n          })\n      )\n    }\n\n    await Promise.all(executionPromises)\n\n    if (serverData) {\n      results.serverData = serverData.props\n    }\n    results.pageContext = page.context\n\n    let searchString = ``\n    if (req?.query) {\n      const maybeQueryString = Object.entries(req.query)\n        .map(([k, v]) => `${k}=${v}`)\n        .join(`&`)\n      if (maybeQueryString) {\n        searchString = `?${maybeQueryString}`\n      }\n    }\n\n    return {\n      results,\n      page,\n      templateDetails,\n      potentialPagePath,\n      serverDataHeaders: serverData?.headers,\n      serverDataStatus: serverData?.status,\n      searchString,\n    }\n  } finally {\n    if (getDataWrapperActivity) {\n      getDataWrapperActivity.end()\n    }\n  }\n}\n\nfunction getPath(data: ISSRData): string {\n  return (\n    (data.page.mode !== `SSG` && data.page.matchPath\n      ? data.potentialPagePath\n      : data.page.path) + (data.page.mode === `SSR` ? data.searchString : ``)\n  )\n}\n\nexport async function renderPageData({\n  data,\n  spanContext,\n}: {\n  data: ISSRData\n  spanContext?: Span | SpanContext\n}): Promise<IPageDataWithQueryResult> {\n  await tracerReadyPromise\n\n  let activity: MaybePhantomActivity\n  try {\n    if (spanContext) {\n      activity = reporter.phantomActivity(`Rendering page-data`, {\n        parentSpan: spanContext,\n      })\n      activity.start()\n    }\n    const results = await constructPageDataString(\n      {\n        componentChunkName: data.page.componentChunkName,\n        path: getPath(data),\n        matchPath: data.page.matchPath,\n        staticQueryHashes: data.templateDetails.staticQueryHashes,\n      },\n      JSON.stringify(data.results)\n    )\n\n    return JSON.parse(results)\n  } finally {\n    if (activity) {\n      activity.end()\n    }\n  }\n}\n\nconst readStaticQueryContext = async (\n  templatePath: string\n): Promise<Record<string, { data: unknown }>> => {\n  const filePath = path.join(\n    __dirname,\n    `sq-context`,\n    templatePath,\n    `sq-context.json`\n  )\n  const rawSQContext = await fs.readFile(filePath, `utf-8`)\n\n  return JSON.parse(rawSQContext)\n}\n\nexport async function renderHTML({\n  data,\n  pageData,\n  spanContext,\n}: {\n  data: ISSRData\n  pageData?: IPageDataWithQueryResult\n  spanContext?: Span | SpanContext\n}): Promise<string> {\n  await tracerReadyPromise\n\n  let wrapperActivity: MaybePhantomActivity\n  try {\n    if (spanContext) {\n      wrapperActivity = reporter.phantomActivity(`Rendering HTML`, {\n        parentSpan: spanContext,\n      })\n      wrapperActivity.start()\n    }\n\n    if (!pageData) {\n      pageData = await renderPageData({\n        data,\n        spanContext: wrapperActivity?.span,\n      })\n    }\n\n    let readStaticQueryContextActivity: MaybePhantomActivity\n    let staticQueryContext: Record<string, { data: unknown }>\n    try {\n      if (wrapperActivity) {\n        readStaticQueryContextActivity = reporter.phantomActivity(\n          `Preparing StaticQueries context`,\n          {\n            parentSpan: wrapperActivity.span,\n          }\n        )\n        readStaticQueryContextActivity.start()\n      }\n      staticQueryContext = await readStaticQueryContext(\n        data.page.componentChunkName\n      )\n    } finally {\n      if (readStaticQueryContextActivity) {\n        readStaticQueryContextActivity.end()\n      }\n    }\n\n    let renderHTMLActivity: MaybePhantomActivity\n    try {\n      if (wrapperActivity) {\n        renderHTMLActivity = reporter.phantomActivity(\n          `Actually rendering HTML`,\n          {\n            parentSpan: wrapperActivity.span,\n          }\n        )\n        renderHTMLActivity.start()\n      }\n\n      const results = await htmlComponentRenderer({\n        pagePath: getPath(data),\n        pageData,\n        staticQueryContext,\n        ...data.templateDetails.assets,\n        inlinePageData: data.page.mode === `SSR` && data.results.serverData,\n      })\n\n      return results.html\n    } finally {\n      if (renderHTMLActivity) {\n        renderHTMLActivity.end()\n      }\n    }\n  } finally {\n    if (wrapperActivity) {\n      wrapperActivity.end()\n    }\n  }\n}\n"],"file":"entry.js"}